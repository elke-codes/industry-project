{"ast":null,"code":"var _jsxFileName = \"/home/elke/code/brainstation/PROJECTS/industry-project/client/src/components/Chat/client/Chat.jsx\",\n    _s = $RefreshSig$();\n\n// Thanks to PedroTech for guiding me through my first socket.io experience!\n// Basic app functionality created by following their tutorial on // https://www.youtube.com/watch?v=NU-HfZY3ATQ\nimport React, { useEffect, useState } from \"react\"; //...uses library, can do this myself?\n\nimport ScrollToBottom from \"react-scroll-to-bottom\";\nimport sendIcon from \"../client/send-icon.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io.connect(\"http://localhost:3001\"); //...socket needs to be passed down as a prop\n\nconst Chat = () => {\n  _s();\n\n  const [userName, setUserName] = useState(\"\");\n  const [room, setRoom] = useState(\"\");\n  const [showChat, setShowChat] = useState(false); //establish a connection between a user that just entered the page and the room they want to enter\n\n  const joinRoom = () => {\n    //set userName and room to be what's typed in the input fields\n    //\n    //check if fields aren't empty\n    if (userName !== \"\" && room !== \"\") {\n      //emit event from frontend\n      //see index.js socket.on(\"join_room\")\n      // where room is the data we 're passing back to server\n      socket.emit(\"join_room\", room);\n      setShowChat(true); //https://www.youtube.com/watch?v=NU-HfZY3ATQ\n    }\n  }; //keep track of message\n\n\n  const [currentMessage, setCurrentMessage] = useState(\"\");\n  const [messageList, setMessageList] = useState([]); //allow messages to be sent through socket\n  //async because you want to wait for the state to be set\n  //...can do with useEffect listening to the currentMessage to change?\n\n  const sendMessage = async () => {\n    if (currentMessage !== \"\") {\n      const messageData = {\n        room: room,\n        author: userName,\n        message: currentMessage,\n        time: new Date(Date.now()).getHours() + \":\" + new Date(Date.now()).getMinutes()\n      }; //see index.js for listener listening to \"send_message\"\n      //send the message data to the backend after the current message has been changed\n\n      await socket.emit(\"send_message\", messageData); //to send message to both, update both messaglists\n\n      setMessageList(list => [...list, messageData]); //empty the container after sending the message\n\n      setCurrentMessage(\"\");\n    }\n  }; // listen to whenever there s changes to our socket server\n\n\n  useEffect(() => {\n    //listen for event emitted from server \"receive_message\", receive data sent from backend\n    socket.on(\"receive_message\", data => {\n      console.log(data); //grab current/previous messagelist, return that with the message added\n\n      setMessageList(list => [...list, data]);\n    });\n  }, [socket]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-window\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-header\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Live Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-body\",\n      children: /*#__PURE__*/_jsxDEV(ScrollToBottom, {\n        className: \"message-container\",\n        children: messageList.map(messageContent => {\n          {\n            /* where messagecontent is the data received back from the server  */\n          }\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message\" // check who is the autor of the message, it it s the one sending it , it s you lol, otherwise it s the other\n            ,\n            id: userName === messageContent.author ? \"you\" : \"other\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"message-content\",\n                children: [\" \", /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: messageContent.message\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 95,\n                  columnNumber: 11\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 93,\n                columnNumber: 10\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"message-meta\",\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\" \", /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"time\",\n                    children: messageContent.time\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 100,\n                    columnNumber: 12\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"author\",\n                    children: messageContent.author\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 103,\n                    columnNumber: 12\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 98,\n                  columnNumber: 11\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 97,\n                columnNumber: 10\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 9\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 8\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-footer\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: currentMessage,\n        placeholder: \"Write a message...\",\n        onChange: e => {\n          setCurrentMessage(e.target.value);\n        } //if the key pressed is enter send the message\n        ,\n        onKeyPress: e => {\n          e.key === \"Enter\" && sendMessage();\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        children: sendIcon\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 3\n  }, this);\n};\n\n_s(Chat, \"aQRSo+PGJNt48SazteHdwwB7lpM=\");\n\n_c = Chat;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["/home/elke/code/brainstation/PROJECTS/industry-project/client/src/components/Chat/client/Chat.jsx"],"names":["React","useEffect","useState","ScrollToBottom","sendIcon","socket","io","connect","Chat","userName","setUserName","room","setRoom","showChat","setShowChat","joinRoom","emit","currentMessage","setCurrentMessage","messageList","setMessageList","sendMessage","messageData","author","message","time","Date","now","getHours","getMinutes","list","on","data","console","log","map","messageContent","e","target","value","key"],"mappings":";;;AAAA;AACA;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C,C,CACA;;AACA,OAAOC,cAAP,MAA2B,wBAA3B;AACA,OAAOC,QAAP,MAAqB,yBAArB;;AACA,MAAMC,MAAM,GAAGC,EAAE,CAACC,OAAH,CAAW,uBAAX,CAAf,C,CAEA;;AACA,MAAMC,IAAI,GAAG,MAAM;AAAA;;AAClB,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACS,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACW,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAC,KAAD,CAAxC,CAHkB,CAKlB;;AACA,QAAMa,QAAQ,GAAG,MAAM;AACtB;AACA;AACA;AACA,QAAIN,QAAQ,KAAK,EAAb,IAAmBE,IAAI,KAAK,EAAhC,EAAoC;AACnC;AACA;AACA;AACAN,MAAAA,MAAM,CAACW,IAAP,CAAY,WAAZ,EAAyBL,IAAzB;AACAG,MAAAA,WAAW,CAAC,IAAD,CAAX,CALmC,CAMnC;AACA;AACD,GAZD,CANkB,CAmBlB;;;AACA,QAAM,CAACG,cAAD,EAAiBC,iBAAjB,IAAsChB,QAAQ,CAAC,EAAD,CAApD;AACA,QAAM,CAACiB,WAAD,EAAcC,cAAd,IAAgClB,QAAQ,CAAC,EAAD,CAA9C,CArBkB,CAuBlB;AACA;AACA;;AACA,QAAMmB,WAAW,GAAG,YAAY;AAC/B,QAAIJ,cAAc,KAAK,EAAvB,EAA2B;AAC1B,YAAMK,WAAW,GAAG;AACnBX,QAAAA,IAAI,EAAEA,IADa;AAEnBY,QAAAA,MAAM,EAAEd,QAFW;AAGnBe,QAAAA,OAAO,EAAEP,cAHU;AAInBQ,QAAAA,IAAI,EACH,IAAIC,IAAJ,CAASA,IAAI,CAACC,GAAL,EAAT,EAAqBC,QAArB,KACA,GADA,GAEA,IAAIF,IAAJ,CAASA,IAAI,CAACC,GAAL,EAAT,EAAqBE,UAArB;AAPkB,OAApB,CAD0B,CAW1B;AACA;;AAEA,YAAMxB,MAAM,CAACW,IAAP,CAAY,cAAZ,EAA4BM,WAA5B,CAAN,CAd0B,CAe1B;;AACAF,MAAAA,cAAc,CAAEU,IAAD,IAAU,CAAC,GAAGA,IAAJ,EAAUR,WAAV,CAAX,CAAd,CAhB0B,CAiB1B;;AACAJ,MAAAA,iBAAiB,CAAC,EAAD,CAAjB;AACA;AACD,GArBD,CA1BkB,CAiDlB;;;AACAjB,EAAAA,SAAS,CAAC,MAAM;AACf;AACAI,IAAAA,MAAM,CAAC0B,EAAP,CAAU,iBAAV,EAA8BC,IAAD,IAAU;AACtCC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ,EADsC,CAEtC;;AACAZ,MAAAA,cAAc,CAAEU,IAAD,IAAU,CAAC,GAAGA,IAAJ,EAAUE,IAAV,CAAX,CAAd;AACA,KAJD;AAKA,GAPQ,EAON,CAAC3B,MAAD,CAPM,CAAT;AASA,sBACC;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA,4BACC;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,6BACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,YADD,eAKC;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,6BAEC,QAAC,cAAD;AAAgB,QAAA,SAAS,EAAC,mBAA1B;AAAA,kBACEc,WAAW,CAACgB,GAAZ,CAAiBC,cAAD,IAAoB;AACpC;AACC;AACA;AACD,8BACC;AACC,YAAA,SAAS,EAAC,SADX,CAEC;AAFD;AAGC,YAAA,EAAE,EACD3B,QAAQ,KAAK2B,cAAc,CAACb,MAA5B,GACG,KADH,GAEG,OANL;AAAA,mCAQC;AAAA,sCACC;AAAK,gBAAA,SAAS,EAAC,iBAAf;AAAA,2BACE,GADF,eAEC;AAAA,4BAAIa,cAAc,CAACZ;AAAnB;AAAA;AAAA;AAAA;AAAA,wBAFD;AAAA;AAAA;AAAA;AAAA;AAAA,sBADD,eAKC;AAAK,gBAAA,SAAS,EAAC,cAAf;AAAA,uCACC;AAAA,6BACE,GADF,eAEC;AAAG,oBAAA,SAAS,EAAC,MAAb;AAAA,8BACEY,cAAc,CAACX;AADjB;AAAA;AAAA;AAAA;AAAA,0BAFD,eAKC;AAAG,oBAAA,SAAS,EAAC,QAAb;AAAA,8BACEW,cAAc,CAACb;AADjB;AAAA;AAAA;AAAA;AAAA,0BALD;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,sBALD;AAAA;AAAA;AAAA;AAAA;AAAA;AARD;AAAA;AAAA;AAAA;AAAA,kBADD;AA4BA,SAhCA;AADF;AAAA;AAAA;AAAA;AAAA;AAFD;AAAA;AAAA;AAAA;AAAA,YALD,eA2CC;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,8BACC;AACC,QAAA,IAAI,EAAC,MADN;AAEC,QAAA,KAAK,EAAEN,cAFR;AAGC,QAAA,WAAW,EAAC,oBAHb;AAIC,QAAA,QAAQ,EAAGoB,CAAD,IAAO;AAChBnB,UAAAA,iBAAiB,CAACmB,CAAC,CAACC,MAAF,CAASC,KAAV,CAAjB;AACA,SANF,CAOC;AAPD;AAQC,QAAA,UAAU,EAAGF,CAAD,IAAO;AAClBA,UAAAA,CAAC,CAACG,GAAF,KAAU,OAAV,IAAqBnB,WAAW,EAAhC;AACA;AAVF;AAAA;AAAA;AAAA;AAAA,cADD,eAaC;AAAQ,QAAA,OAAO,EAAEA,WAAjB;AAAA,kBAA+BjB;AAA/B;AAAA;AAAA;AAAA;AAAA,cAbD;AAAA;AAAA;AAAA;AAAA;AAAA,YA3CD;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AA6DA,CAxHD;;GAAMI,I;;KAAAA,I;AA0HN,eAAeA,IAAf","sourcesContent":["// Thanks to PedroTech for guiding me through my first socket.io experience!\n// Basic app functionality created by following their tutorial on // https://www.youtube.com/watch?v=NU-HfZY3ATQ\n\nimport React, { useEffect, useState } from \"react\";\n//...uses library, can do this myself?\nimport ScrollToBottom from \"react-scroll-to-bottom\";\nimport sendIcon from \"../client/send-icon.svg\";\nconst socket = io.connect(\"http://localhost:3001\");\n\n//...socket needs to be passed down as a prop\nconst Chat = () => {\n\tconst [userName, setUserName] = useState(\"\");\n\tconst [room, setRoom] = useState(\"\");\n\tconst [showChat, setShowChat] = useState(false);\n\n\t//establish a connection between a user that just entered the page and the room they want to enter\n\tconst joinRoom = () => {\n\t\t//set userName and room to be what's typed in the input fields\n\t\t//\n\t\t//check if fields aren't empty\n\t\tif (userName !== \"\" && room !== \"\") {\n\t\t\t//emit event from frontend\n\t\t\t//see index.js socket.on(\"join_room\")\n\t\t\t// where room is the data we 're passing back to server\n\t\t\tsocket.emit(\"join_room\", room);\n\t\t\tsetShowChat(true);\n\t\t\t//https://www.youtube.com/watch?v=NU-HfZY3ATQ\n\t\t}\n\t};\n\t//keep track of message\n\tconst [currentMessage, setCurrentMessage] = useState(\"\");\n\tconst [messageList, setMessageList] = useState([]);\n\n\t//allow messages to be sent through socket\n\t//async because you want to wait for the state to be set\n\t//...can do with useEffect listening to the currentMessage to change?\n\tconst sendMessage = async () => {\n\t\tif (currentMessage !== \"\") {\n\t\t\tconst messageData = {\n\t\t\t\troom: room,\n\t\t\t\tauthor: userName,\n\t\t\t\tmessage: currentMessage,\n\t\t\t\ttime:\n\t\t\t\t\tnew Date(Date.now()).getHours() +\n\t\t\t\t\t\":\" +\n\t\t\t\t\tnew Date(Date.now()).getMinutes()\n\t\t\t};\n\n\t\t\t//see index.js for listener listening to \"send_message\"\n\t\t\t//send the message data to the backend after the current message has been changed\n\n\t\t\tawait socket.emit(\"send_message\", messageData);\n\t\t\t//to send message to both, update both messaglists\n\t\t\tsetMessageList((list) => [...list, messageData]);\n\t\t\t//empty the container after sending the message\n\t\t\tsetCurrentMessage(\"\");\n\t\t}\n\t};\n\n\t// listen to whenever there s changes to our socket server\n\tuseEffect(() => {\n\t\t//listen for event emitted from server \"receive_message\", receive data sent from backend\n\t\tsocket.on(\"receive_message\", (data) => {\n\t\t\tconsole.log(data);\n\t\t\t//grab current/previous messagelist, return that with the message added\n\t\t\tsetMessageList((list) => [...list, data]);\n\t\t});\n\t}, [socket]);\n\n\treturn (\n\t\t<div className=\"chat-window\">\n\t\t\t<div className=\"chat-header\">\n\t\t\t\t<p>Live Chat</p>\n\t\t\t</div>\n\t\t\t{/* where messagecontent is the data received back from the server  */}\n\t\t\t<div className=\"chat-body\">\n\t\t\t\t{/* wrap whatever you r mapping in the scrolltobottom and set a height on it, in this case the height will be the same as the message-container */}\n\t\t\t\t<ScrollToBottom className=\"message-container\">\n\t\t\t\t\t{messageList.map((messageContent) => {\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t/* where messagecontent is the data received back from the server  */\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tclassName=\"message\"\n\t\t\t\t\t\t\t\t// check who is the autor of the message, it it s the one sending it , it s you lol, otherwise it s the other\n\t\t\t\t\t\t\t\tid={\n\t\t\t\t\t\t\t\t\tuserName === messageContent.author\n\t\t\t\t\t\t\t\t\t\t? \"you\"\n\t\t\t\t\t\t\t\t\t\t: \"other\"\n\t\t\t\t\t\t\t\t}>\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t<div className=\"message-content\">\n\t\t\t\t\t\t\t\t\t\t{\" \"}\n\t\t\t\t\t\t\t\t\t\t<p>{messageContent.message}</p>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"message-meta\">\n\t\t\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t\t\t{\" \"}\n\t\t\t\t\t\t\t\t\t\t\t<p className=\"time\">\n\t\t\t\t\t\t\t\t\t\t\t\t{messageContent.time}\n\t\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t\t<p className=\"author\">\n\t\t\t\t\t\t\t\t\t\t\t\t{messageContent.author}\n\t\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</ScrollToBottom>\n\t\t\t</div>\n\t\t\t<div className=\"chat-footer\">\n\t\t\t\t<input\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tvalue={currentMessage}\n\t\t\t\t\tplaceholder=\"Write a message...\"\n\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\tsetCurrentMessage(e.target.value);\n\t\t\t\t\t}}\n\t\t\t\t\t//if the key pressed is enter send the message\n\t\t\t\t\tonKeyPress={(e) => {\n\t\t\t\t\t\te.key === \"Enter\" && sendMessage();\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t\t<button onClick={sendMessage}>{sendIcon}</button>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default Chat;\n"]},"metadata":{},"sourceType":"module"}