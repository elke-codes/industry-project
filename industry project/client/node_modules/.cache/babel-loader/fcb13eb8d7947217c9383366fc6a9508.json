{"ast":null,"code":"var _jsxFileName = \"/home/elke/code/brainstation/PROJECTS/industry-project/client/src/components/Chat/client/Chat.jsx\",\n    _s = $RefreshSig$();\n\n// Thanks to PedroTech for guiding me through my first socket.io experience!\n// Basic app functionality created by following their tutorial on // https://www.youtube.com/watch?v=NU-HfZY3ATQ\nimport React, { useEffect, useState } from \"react\"; //...uses library, can do this myself?\n\nimport ScrollToBottom from \"react-scroll-to-bottom\"; // import sendIcon from \"../../../assets/icons/mic.png\";\n\nimport sendIcon from \"./send-icon.svg\";\nimport io from \"socket.io-client\";\nimport chatButton from \"../../../assets/icons/chat.svg\";\nimport \"./App.css\"; // import { useState } from \"react\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst socket = io.connect(\"http://localhost:3001\"); //...socket needs to be passed down as a prop\n\nconst Chat = () => {\n  _s();\n\n  const [userName, setUserName] = useState(\"\");\n  const [room, setRoom] = useState(1);\n  const [showChat, setShowChat] = useState(false); //establish a connection between a user that just entered the page and the room they want to enter\n\n  const joinRoom = () => {\n    //set userName and room to be what's typed in the input fields\n    //\n    //check if fields aren't empty\n    if (userName !== \"\" && room !== \"\") {\n      //emit event from frontend\n      //see index.js socket.on(\"join_room\")\n      // where room is the data we 're passing back to server\n      socket.emit(\"join_room\", room);\n      setShowChat(true); //https://www.youtube.com/watch?v=NU-HfZY3ATQ\n    }\n  }; //keep track of message\n\n\n  const [currentMessage, setCurrentMessage] = useState(\"\");\n  const [messageList, setMessageList] = useState([]); //allow messages to be sent through socket\n  //async because you want to wait for the state to be set\n  //...can do with useEffect listening to the currentMessage to change?\n\n  const sendMessage = async () => {\n    if (currentMessage !== \"\") {\n      const messageData = {\n        room: room,\n        author: userName,\n        message: currentMessage,\n        time: new Date(Date.now()).getHours() + \":\" + new Date(Date.now()).getMinutes()\n      }; //see index.js for listener listening to \"send_message\"\n      //send the message data to the backend after the current message has been changed\n\n      await socket.emit(\"send_message\", messageData); //to send message to both, update both messaglists\n\n      setMessageList(list => [...list, messageData]); //empty the container after sending the message\n\n      setCurrentMessage(\"\");\n    }\n  }; // listen to whenever there s changes to our socket server\n\n\n  useEffect(() => {\n    //listen for event emitted from server \"receive_message\", receive data sent from backend\n    socket.on(\"receive_message\", data => {\n      console.log(data); //grab current/previous messagelist, return that with the message added\n\n      setMessageList(list => [...list, data]);\n    });\n  }, [socket]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: !showChat ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"chat-button\",\n          src: chatButton,\n          alt: \"\",\n          name: \"userName\",\n          onChange: e => {\n            setUserName(\"Tim\");\n            setRoom(1);\n          },\n          onClick: () => {\n            console.log(\"clicked\");\n            joinRoom();\n            setShowChat(true);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 7\n        }, this)\n      }, void 0, false) : /*#__PURE__*/_jsxDEV(Chat, {\n        socket: socket,\n        userName: userName,\n        room: room\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 6\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 4\n    }, this), showChat ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-window\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-header\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Live Chat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-body\",\n        children: /*#__PURE__*/_jsxDEV(ScrollToBottom, {\n          className: \"message-container\",\n          children: messageList.map(messageContent => {\n            {\n              /* where messagecontent is the data received back from the server  */\n            }\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message\" // check who is the autor of the message, it it s the one sending it , it s you lol, otherwise it s the other\n              ,\n              id: userName === messageContent.author ? \"you\" : \"other\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"message-content\",\n                  children: [\" \", /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: messageContent.message\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 146,\n                    columnNumber: 13\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 144,\n                  columnNumber: 12\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"message-meta\",\n                  children: /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: [\" \", /*#__PURE__*/_jsxDEV(\"p\", {\n                      className: \"time\",\n                      children: messageContent.time\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 151,\n                      columnNumber: 14\n                    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                      className: \"author\",\n                      children: messageContent.author\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 154,\n                      columnNumber: 14\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 149,\n                    columnNumber: 13\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 148,\n                  columnNumber: 12\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 143,\n                columnNumber: 11\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 10\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-footer\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: currentMessage,\n          placeholder: \"Write a message...\",\n          onChange: e => {\n            setCurrentMessage(e.target.value);\n          } //if the key pressed is enter send the message\n          ,\n          onKeyPress: e => {\n            e.key === \"Enter\" && sendMessage();\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: sendMessage,\n          children: sendIcon\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 5\n    }, this) : null]\n  }, void 0, true);\n};\n\n_s(Chat, \"umJwymmFsMmT4xBbIgMoYQisoHQ=\");\n\n_c = Chat;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["/home/elke/code/brainstation/PROJECTS/industry-project/client/src/components/Chat/client/Chat.jsx"],"names":["React","useEffect","useState","ScrollToBottom","sendIcon","io","chatButton","socket","connect","Chat","userName","setUserName","room","setRoom","showChat","setShowChat","joinRoom","emit","currentMessage","setCurrentMessage","messageList","setMessageList","sendMessage","messageData","author","message","time","Date","now","getHours","getMinutes","list","on","data","console","log","e","map","messageContent","target","value","key"],"mappings":"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","sourcesContent":["// Thanks to PedroTech for guiding me through my first socket.io experience!\n// Basic app functionality created by following their tutorial on // https://www.youtube.com/watch?v=NU-HfZY3ATQ\n\nimport React, { useEffect, useState } from \"react\";\n//...uses library, can do this myself?\nimport ScrollToBottom from \"react-scroll-to-bottom\";\n// import sendIcon from \"../../../assets/icons/mic.png\";\nimport sendIcon from \"./send-icon.svg\";\nimport io from \"socket.io-client\";\nimport chatButton from \"../../../assets/icons/chat.svg\";\nimport \"./App.css\";\n// import { useState } from \"react\";\n\nconst socket = io.connect(\"http://localhost:3001\");\n\n//...socket needs to be passed down as a prop\nconst Chat = () => {\n\tconst [userName, setUserName] = useState(\"\");\n\tconst [room, setRoom] = useState(1);\n\tconst [showChat, setShowChat] = useState(false);\n\n\t//establish a connection between a user that just entered the page and the room they want to enter\n\tconst joinRoom = () => {\n\t\t//set userName and room to be what's typed in the input fields\n\t\t//\n\t\t//check if fields aren't empty\n\t\tif (userName !== \"\" && room !== \"\") {\n\t\t\t//emit event from frontend\n\t\t\t//see index.js socket.on(\"join_room\")\n\t\t\t// where room is the data we 're passing back to server\n\t\t\tsocket.emit(\"join_room\", room);\n\t\t\tsetShowChat(true);\n\t\t\t//https://www.youtube.com/watch?v=NU-HfZY3ATQ\n\t\t}\n\t};\n\t//keep track of message\n\tconst [currentMessage, setCurrentMessage] = useState(\"\");\n\tconst [messageList, setMessageList] = useState([]);\n\n\t//allow messages to be sent through socket\n\t//async because you want to wait for the state to be set\n\t//...can do with useEffect listening to the currentMessage to change?\n\tconst sendMessage = async () => {\n\t\tif (currentMessage !== \"\") {\n\t\t\tconst messageData = {\n\t\t\t\troom: room,\n\t\t\t\tauthor: userName,\n\t\t\t\tmessage: currentMessage,\n\t\t\t\ttime:\n\t\t\t\t\tnew Date(Date.now()).getHours() +\n\t\t\t\t\t\":\" +\n\t\t\t\t\tnew Date(Date.now()).getMinutes()\n\t\t\t};\n\n\t\t\t//see index.js for listener listening to \"send_message\"\n\t\t\t//send the message data to the backend after the current message has been changed\n\n\t\t\tawait socket.emit(\"send_message\", messageData);\n\t\t\t//to send message to both, update both messaglists\n\t\t\tsetMessageList((list) => [...list, messageData]);\n\t\t\t//empty the container after sending the message\n\t\t\tsetCurrentMessage(\"\");\n\t\t}\n\t};\n\n\t// listen to whenever there s changes to our socket server\n\tuseEffect(() => {\n\t\t//listen for event emitted from server \"receive_message\", receive data sent from backend\n\t\tsocket.on(\"receive_message\", (data) => {\n\t\t\tconsole.log(data);\n\t\t\t//grab current/previous messagelist, return that with the message added\n\t\t\tsetMessageList((list) => [...list, data]);\n\t\t});\n\t}, [socket]);\n\n\treturn (\n\t\t<>\n\t\t\t<div className=\"App\">\n\t\t\t\t{!showChat ? (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<img\n\t\t\t\t\t\t\tclassName=\"chat-button\"\n\t\t\t\t\t\t\tsrc={chatButton}\n\t\t\t\t\t\t\talt=\"\"\n\t\t\t\t\t\t\tname=\"userName\"\n\t\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\t\tsetUserName(\"Tim\");\n\t\t\t\t\t\t\t\tsetRoom(1);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tconsole.log(\"clicked\");\n\t\t\t\t\t\t\t\tjoinRoom();\n\t\t\t\t\t\t\t\tsetShowChat(true);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t{/* <div className=\"joinChatContainer\">\n\t\t\t\t\t\t\t<h3>Join a chat</h3>\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\tplaceholder=\"Name...\"\n\t\t\t\t\t\t\t\tname=\"userName\"\n\t\t\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\t\t\tsetUserName(e.target.value);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\tplaceholder=\"Room ID ...\"\n\t\t\t\t\t\t\t\tname=\"room\"\n\t\t\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\t\t\tsetRoom(e.target.value);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<button onClick={joinRoom}>Join a room</button>\n\t\t\t\t\t\t</div> */}\n\t\t\t\t\t</>\n\t\t\t\t) : (\n\t\t\t\t\t<Chat socket={socket} userName={userName} room={room} />\n\t\t\t\t)}\n\t\t\t</div>\n\t\t\t{showChat ? (\n\t\t\t\t<div className=\"chat-window\">\n\t\t\t\t\t<div className=\"chat-header\">\n\t\t\t\t\t\t<p>Live Chat</p>\n\t\t\t\t\t</div>\n\t\t\t\t\t{/* where messagecontent is the data received back from the server  */}\n\t\t\t\t\t<div className=\"chat-body\">\n\t\t\t\t\t\t{/* wrap whatever you r mapping in the scrolltobottom and set a height on it, in this case the height will be the same as the message-container */}\n\t\t\t\t\t\t<ScrollToBottom className=\"message-container\">\n\t\t\t\t\t\t\t{messageList.map((messageContent) => {\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t/* where messagecontent is the data received back from the server  */\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\t\tclassName=\"message\"\n\t\t\t\t\t\t\t\t\t\t// check who is the autor of the message, it it s the one sending it , it s you lol, otherwise it s the other\n\t\t\t\t\t\t\t\t\t\tid={\n\t\t\t\t\t\t\t\t\t\t\tuserName === messageContent.author\n\t\t\t\t\t\t\t\t\t\t\t\t? \"you\"\n\t\t\t\t\t\t\t\t\t\t\t\t: \"other\"\n\t\t\t\t\t\t\t\t\t\t}>\n\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"message-content\">\n\t\t\t\t\t\t\t\t\t\t\t\t{\" \"}\n\t\t\t\t\t\t\t\t\t\t\t\t<p>{messageContent.message}</p>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"message-meta\">\n\t\t\t\t\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\" \"}\n\t\t\t\t\t\t\t\t\t\t\t\t\t<p className=\"time\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{messageContent.time}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<p className=\"author\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{messageContent.author}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</ScrollToBottom>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"chat-footer\">\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tvalue={currentMessage}\n\t\t\t\t\t\t\tplaceholder=\"Write a message...\"\n\t\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\t\tsetCurrentMessage(e.target.value);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t//if the key pressed is enter send the message\n\t\t\t\t\t\t\tonKeyPress={(e) => {\n\t\t\t\t\t\t\t\te.key === \"Enter\" && sendMessage();\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<button onClick={sendMessage}>{sendIcon}</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t) : null}\n\t\t</>\n\t);\n};\n\nexport default Chat;\n"]},"metadata":{},"sourceType":"module"}